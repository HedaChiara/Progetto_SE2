Y <- R * sin(theta)
return(X,Y)
}
rBoxMuller <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
Y <- R * sin(theta)
return(X,Y)
}
(X, Y) <- rBoxMuller()
c(X, Y) <- rBoxMuller()
X <- rBoxMullerX()
rBoxMullerX <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
return(X)
}
rBoxMullerX <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
return(X)
}
rBoxMullerY <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
Y <- R * sin(theta)
return(Y)
}
X <- rBoxMullerX()
Y <- rBoxMullerY()
head(X)
# genero X v.c. normale
rBoxMullerX <- function(n=10000) {
set.seed(123)
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
return(X)
}
rBoxMullerY <- function(n=10000) {
set.seed(123)
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
Y <- R * sin(theta)
return(Y)
}
X <- rBoxMullerX()
Y <- rBoxMullerY()
plot(ecdf(X))
curve(ecdf(Y), col=2)
plot(ecdf(Y), col=2)
plot(ecdf(X))
plot(ecdf(Y), col=2, add=T)
help(pnorm)
curve(pnorm(seq(0,1,by=0.001)))
plot(pnorm(seq(0,1,by=0.001)), col=3)
plot(ecdf(X))
plot(ecdf(Y), col=2, add=T)
plot(ecdf(Y), col=2, add=T)
plot(ecdf(X))
plot(ecdf(Y), col=2, add=T)
help("qqnorm")
plot(qqnorm())
plot(-4, 4, qqnorm(x), col=3)
plot(-4, 4, qqnorm(x), col=3)
plot(-4, 4, qqnorm(), col=3)
plot(x, qqnorm(x), col=3)
curve(pnorm(x), col=3)
plot(ecdf(X))
plot(ecdf(Y), col=2, add=T)
curve(pnorm(x), col=3)
plot(ecdf(X))
plot(ecdf(Y), col=2, add=T)
curve(pnorm(x), col=3, add=T)
sim.norm.bm.1 <- function(n){
n1 <- floor((n-1)/2) + 1 # Per n pari n1 = n/2;
# per n dispari n1 = (n + 1)/2
#                  = (parte intera di (n-1)/2) + 1
u1 <- runif(n1)
u2 <- runif(n1)
R <- sqrt(-2*log(u1))
theta <- 2*pi*u2
x <- R*cos(theta)
y <- R*sin(theta)
c(x,y)[1:n] # Considero solo i primi n valori (se n e' dispari ne genero n+1).
}
out1 <- sim.norm.bm.1(2000)
hist(out1,br=25,xlab="",ylab="",main="2,000 simulazioni da una Normale",freq=FALSE)
curve(dnorm(x),from=-4,to=4,col="blue",add=TRUE)
out1 <- sim.norm.bm.1(10000)
hist(out1,br=25,xlab="",ylab="",main="10,000 simulazioni da una Normale",freq=FALSE)
curve(dnorm(x),from=-4,to=4,col="blue",add=TRUE)
library(MLGdata)
install.packages("MLGdata")
library(MLGdata)
Clotting
?Clotting
plot(Clotting$u, Clotting$tempo, color=as.factor(lotto))
plot(Clotting$u, Clotting$tempo, color=as.factor(Clotting$lotto))
plot(Clotting$u, Clotting$tempo, col=as.factor(Clotting$lotto))
plot(Clotting$u, Clotting$tempo, col=as.factor(Clotting$lotto), pch=19)
library(tidyverse)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(lotto), pch=19)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(lotto), pch=19)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19)
as.factor(Clotting$lotto)
str(Clotting)
help("relevel")
levels(Clotting$lotto) <- c(2,1)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_bw()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto) + 1, pch=19) +
theme_bw()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto) + 1, pch=19) +
theme_bw()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto + 1), pch=19) +
theme_bw()
levels(Clotting$lotto) <- c(3,2)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_bw()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_light()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_void()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_bw()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_light()
Credit
head(Credit)
str(Credit)
Aids
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi, nbreaks=10)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_discrete(nbreaks=10) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_discrete(breaks=seq(0,20,by=5)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks=seq(0,20,by=5)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks=breaks = seq(min(Aids$Year), max(Aids$Year), by = 1)) +
i
Aids
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks=breaks = seq(min(Aids$Year), max(Aids$Year), by = 1)) +
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks = seq(min(Aids$Year), max(Aids$Year), by = 1)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks = seq(min(tempo), max(tempo), by = 1)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks = seq(min(x), max(x), by = 1)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks = seq(min(Aids$tempo), max(Aids$tempo), by = 1)) +
theme_light()
# DATI RAGGRUPPATI
Beetles
# non raggruppati
Beetles10
# DATI RAGGRUPPATI
Beetles
help("MLGdata")
# RISPOSTE POLITOMICHE
Customer
# RISPOSTE POLITOMICHE
head(Customer)
Customer[450:460,]
Customer[400:410,]
Customer[30:40,]
Customer[50:60,]
Customer[100:110,]
Customer[130:150,]
Customer[230:250,]
table(Customer)
ftable(Customer)
table(Customer)
ftable(Customer)
f.table(Customer)
ftable(Customer)
Customer3
# TABELLE DI FREQUENZA
Drugs2
# TABELLE DI FREQUENZA
Drugs
Drugs2
Drugs3
# TABELLE DI FREQUENZA
# raggruppati:
Drugs
# TABELLE DI FREQUENZA
# raggruppati:
Drugs2
# TABELLE DI FREQUENZA
# raggruppati:
Drugs
# RISPOSTE MULTIVARIATE
Orthodont
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
library(MLGdata)
# per salvare immagini, in vista dell'esame, fare export -> copy to clipboard,
# poi su libreOffice, pastespecial -> bitmap
str(Clotting)
head(Clotting)
with(Clotting, {
plot(log(u), tempo, type="n")
points(log(u[lotto=="uno"]), tempo[lotto=="uno"])
points(log(u[lotto!="uno"]), tempo[lotto!="uno"], pch=19, col=2)
})
#### Modello Gamma con funzione di legame canonica ####
# nei glm la risposta rimane com'è, al massimo cambio la funzione di legame
clotting.glm <- glm(tempo ~ log(u) + lotto, family = Gamma, data = Clotting)
sumclot <- summary(clotting.glm)
sumclot
#### Modello Gamma con funzione di legame canonica ####
# nei glm la risposta rimane com'è, al massimo cambio la funzione di legame
clotting.glm <- glm(tempo ~ log(u) + lotto, family = Gamma("inverse"), data = Clotting)
# entrambe le esplicative risultano significative
# risposta
y <- Clotting$tempo
# valori predetti
muhat <- fitted(clotting.glm)
# c'è anche la stima del parametro di dispersione, che è il reciproco del parametro di forma (si trova nel summary)
phitilde <- summary(clotting.glm)$dispersion
# occhio che phitilde NON e' la stima di massima verosimiglianza di 1/alpha con alpha parametro di forma della gamma
# smv di alpha è
library(MASS)
gamma.dispersion(clotting.glm)
1/gamma.dispersion(clotting.glm) # gdl della gamma, che ben approssima una normale
#### MODELLO CON INTERAZIONE ####
clotting.glm2 <- update(clotting.glm, .~. + log(u) : lotto)
summary(clotting.glm2)
anova(clotting.glm, clotting.glm2, test="F") # usa la F (di default)
par(mfrow=c(1,2))
with(Clotting, {
ploy(log(u), tempo, type="n", ylim=range(fitted(clotting.glm2), tempo))
points(log(u[lotto=="uno"]), tempo[lotto=="uno"])
points(log(u[lotto!="uno"]), tempo[lotto!="uno"], pch=19, col=2)
points(log(u), fitted(clotting.glm2), col=3, pch=4)
plot(tempo, fitted(clotting.glm2), xlab="valori osservati", ylab="valori stimati")
abline(0, 1, col=2)
})
par(mfrow=c(1,2))
with(Clotting, {
plot(log(u), tempo, type="n", ylim=range(fitted(clotting.glm2), tempo))
points(log(u[lotto=="uno"]), tempo[lotto=="uno"])
points(log(u[lotto!="uno"]), tempo[lotto!="uno"], pch=19, col=2)
points(log(u), fitted(clotting.glm2), col=3, pch=4)
plot(tempo, fitted(clotting.glm2), xlab="valori osservati", ylab="valori stimati")
abline(0, 1, col=2)
})
with(Clotting, {
plot(log(u), tempo, type="n", ylim=range(fitted(clotting.glm2), tempo))
points(log(u[lotto=="uno"]), tempo[lotto=="uno"])
points(log(u[lotto!="uno"]), tempo[lotto!="uno"], pch=19, col=2)
points(log(u), fitted(clotting.glm2), col=4, pch=4, lwd=2)
plot(tempo, fitted(clotting.glm2), xlab="valori osservati", ylab="valori stimati")
abline(0, 1, col=2)
})
names(Clotting)
help(glm)
#### MODELLO GAMMA CON LINK LOGARITMICO ####
clotting.glm2 <- glm(tempo ~ log(u) + lotto, family=Gamma("log"), data=Clotting)
summary(clotting.glm2)
anova(clotting.glm, clotting.glm2, test="F")
# non sembra essere migliore, anzi
c(AIC(clotting.glm), AIC(clotting.glm2))
#### MODELLO GAMMA CON LINK LOGARITMICO ####
clotting.glm3 <- glm(tempo ~ log(u) + lotto, family=Gamma("log"), data=Clotting)
summary(clotting.glm3)
anova(clotting.glm, clotting.glm3, test="F")
# non sembra essere migliore, anzi
c(AIC(clotting.glm), AIC(clotting.glm3))
# ha pure AIC maggiore
# graficamente
with(Clotting, {
plot(log(u), tempo, type="n", ylim=range(fitted(clotting.glm), tempo))
points(log(u[lotto=="uno"]), tempo[lotto=="uno"])
points(log(u[lotto!="uno"]), tempo[lotto!="uno"], pch=19, col=2)
#points(log(u), fitted(clotting.glm3), col=4, pch=4, lwd=2)
})
# ha pure AIC maggiore
# graficamente
par(mfrow=c(1,1))
with(Clotting, {
plot(log(u), tempo, type="n", ylim=range(fitted(clotting.glm), tempo))
points(log(u[lotto=="uno"]), tempo[lotto=="uno"])
points(log(u[lotto!="uno"]), tempo[lotto!="uno"], pch=19, col=2)
#points(log(u), fitted(clotting.glm3), col=4, pch=4, lwd=2)
})
with(Clotting, {
plot(log(u), tempo, type="n", ylim=range(fitted(clotting.glm), tempo))
points(log(u[lotto=="uno"]), tempo[lotto=="uno"])
points(log(u[lotto!="uno"]), tempo[lotto!="uno"], pch=19, col=2)
points(log(u), fitted(clotting.glm3), col=4, pch=4, lwd=2)
})
with(Clotting, {
plot(log(u), tempo, type="n", ylim=range(fitted(clotting.glm), tempo))
points(log(u[lotto=="uno"]), tempo[lotto=="uno"])
points(log(u[lotto!="uno"]), tempo[lotto!="uno"], pch=19, col=2)
points(log(u), fitted(clotting.glm), col=3, pch=4, lwd=2)
points(log(u), fitted(clotting.glm3), col=4, pch=4, lwd=2)
})
legend("topright", c("link canonico", "link logaritmico"), col=3:4, lty=rep(1,2))
legend("topright", c("link canonico", "link logaritmico"), col=3:4, lty=rep(1,2), lwd=rep(2,2))
library(MLGdata)
library(tidyverse)
# Analisi esplorativa (ha senso solo per dati raggruppati)
Beetles
str(Beetles)
y <- Beetles$uccisi / Beetles$num
y
plot(y ~ logdose, data=Beetles)
#### FUNZIONE DI LEGAME LOGIT (DATI RAGGRUPPATI) ####
logit <- log(y/(1-y))
# con un modello di regressione binomiale trasformiamo la y tramite un predittore lineare (nei parametri)
# se facciamo una trasformazione,
logit
# problema: ho Inf come ultimo valore. 0 e 1 sarebbero esclusi come valori di p_i
# facciamo una modifica asintoticamente trascurabile
# possiamo usare la Funzione Logistica Empirica, che da' sempre valori ammessi
# FUNZIONE LOGISTICA EMPIRICA
logitc <- with(Beetles, log((y + 0.5 / num) / (1 - y + 0.5 / num)))
logitc
# grafico della trasformata e controllo approssimazione lineare per questa trasformazione delle y
plot(Beetles$logdose, logitc)
abline(lm(logitc ~ logdose, data = Beetles))
summary(lm(logitc ~ logdose, data = Beetles))$r.squared
#### FUNZIONE DI LEGAME PROBIT (DATI RAGGRUPPATI) ####
# stesso problema di prima per i valori infiniti delle trasformazioni delle y:
# altra trasformazione (direttamente sulle y)
yc <- y + 0.1 / Beetles$num # aggiungo quantità piccola a tutte le y
yc[y > 0.5] <- y [y > 0.5] - 0.1 / Beetles$num[y > 0.5] # per valori più grandi invece sottraggo per non avere 1 poi
yc
probitc <- qnorm(yc) # probit delle y corrette
plot(Beetles$logdose, logitc)
abline(lm(logitc ~ logdose, data = Beetles))
points(Beetles$logdose, probitc, pch=2, col=2)
abline(lm(probitc ~ logdose, data=Beetles), col=2)
summary(lm(probitc ~ logdose, data=Beetles))$r.squared
#### FUNZIONE DI LEGAME LOG-LOG COMPLEMENTARE (DATI RAGGRUPPATI) ####
# uso le stesse y corrette di prima
cloglog <- log(-log(1 - yc))
plot(Beetles$logdose, logitc)
abline(lm(logitc ~ logdose, data = Beetles))
points(Beetles$logdose, cloglog, pch=2, col=2)
abline(lm(cloglog ~ logdose, data=Beetles), col=2)
legend("topleft", c("logit", "cloglog"), lty=rep(1,2), col=1:2, pch=1:2)
summary(lm(cloglog ~ logdose, data=Beetles))$r.squared
#### FUNZIONE DI LEGAME CAUCHIT (DATI RAGGRUPPATI) ####
# uso le stesse y corrette di prima
cauchit <- tan(pi*(yc-0.5))
plot(Beetles$logdose, logitc)
abline(lm(logitc ~ logdose, data = Beetles))
points(Beetles$logdose, cloglog, pch=3, col=3)
abline(lm(cloglog ~ logdose, data=Beetles), col=3)
points(Beetles$logdose, cauchit, pch=2, col=2)
abline(lm(cauchit ~ logdose, data=Beetles), col=2)
points(Beetles$logdose, probitc, pch=4, col=4)
abline(lm(probitc ~ logdose, data=Beetles), col=4)
legend("topleft", c("logit", "cloglog", "cauchit", "probit"), lty=rep(1,4), col=c(1,3,2,4), pch=c(1,3,2,4))
cauchit
summary(lm(cauchit ~ logdose, data=Beetles))$r.squared
Beetles.glm <- glm(y ~ logdose, family = binomial,
weights = num,
data = Beetles)
Beetles.glm <- glm(cbind(uccisi, num - uccisi)~logdose,
family = binomial,
data = Beetles)
summary(Beetles.glm)
#### ESERCIZO: calcolare IC di Wald per predittore lineare con x fissato a 1.8 ####
# oggetto glm, dati per cui voglio la previsione sottoforma di dataframe
predetti <- predict(Beetles.glm, newdata = data.frame(logdose = 1.8), se = TRUE)
predetti
ICeta <- predetti$fit + c(-1,1) * qnorm(0.975) * predetti$se.fit
ICeta
# previsione sulla probabilita'
ICpi <- plogis(ICeta)
ICpi
# oppure, meglio (a prescindere dal link)
Beetles.glm$family$linkinv(ICeta)
# oppure a prescindere dal link,
Beetles.glm$family$linkinv(ICeta)
# oppure, metodo delta per la stima dello standard error (si usa type="response")
predpi <- predict(Beetles.glm, newdata=data.frame(logdose=1.8), type="response", se=T)
predpi$fit + c(-1,1) * qnorm(0.975) * predpi$se.fit
#### SCELTA DEL MODELLO (DATI RAGGRUPPATI) ####
# MODELLO PROBIT
Beetles.glm2 <- glm(y ~ logdose, weights = num,
family = binomial(link=probit),
data = Beetles)
summary(Beetles.glm2)
# il coefficiente della dose e' positivo e significativamente diverso da 0 (ha senso)
# vedo come le curve stimate si adattano ai valori osservati
pihat <- fitted(Beetles.glm)
plot(Beetles$logdose, y)
lines(Beetles$logdose, pihat, lty=2)
pihat2 <- fitted(Beetles.glm2)
lines(Beetles$logdose, pihat2, lty=3, col=2)
# differenze minime
Beetles.glm$aic
Beetles.glm2$aic
# MODELLO LOG-LOG COMPLEMENTARE
Beetles.glm3 <- glm(y ~ logdose, weights = num,
family = binomial(link=cloglog),
data = Beetles)
summary(Beetles.glm3)
pihat3 <- fitted(Beetles.glm3)
lines(Beetles$logdose, pihat3, lty=3, col=3)
legend("topleft", c("logit", "probit", "cloglog"), lty=2:4, col=1:3)
Beetles.glm$aic
Beetles.glm2$aic
Beetles.glm3$aic
#### CURVA ROC (DATI NON RAGGRUPPATI) ####
# per misurare la capacita' predittiva di un modello
# si puo' applicare soltanto a dati NON raggruppati
head(Beetles10)
library(pROC)
# modello per i dati non raggruppati
Beetles10.glm3 <- glm(ucciso ~ log.dose10,
family = binomial(link=cloglog),
data = Beetles10)
pihat310 <- fitted(Beetles10.glm3)
plot(roc(Beetles10$ucciso, pihat310), print.auc=T)
# AUC molto elevata
# se uso i dati raggruppati:
plot(roc(y, pihat3), print.auc=T)
plot(roc(Beetles10$ucciso, pihat310), print.auc=T)
#### DATI RAGGRUPPATI ####
Customer3
library(MLGdata)
#### DATI RAGGRUPPATI ####
Customer3
str(Customer3)
# Modello logit cumulato per dati raggruppati (uso cbind(modalità))
Customer3.vglm <- vglm(cbind(Verydissatisfied, Dissatisfied, Neutral, Satisfied, Verysatisfied) ~ delay,
family = cumulative(parallel=TRUE), data=Customer3)
# ora ho vettori con le frequenze
library(VGAM)
# Modello logit cumulato per dati raggruppati (uso cbind(modalità))
Customer3.vglm <- vglm(cbind(Verydissatisfied, Dissatisfied, Neutral, Satisfied, Verysatisfied) ~ delay,
family = cumulative(parallel=TRUE), data=Customer3)
summary(Customer3.vglm)
# 11 gdl perchè ci sono 16 valori da determinare con 4 intercette e un beta da determinare (16-5=11)
# la devianza residua è utilizzabile come indice di bontà di adattamento
# vglm usa @ al posto di $ per estrarre oggetti
1 - pchisq(37.1055, 11)
install.packages("pscl")
install.packages("glmbb")
library(tidyverse)
books <- read_csv("sf_books.csv")
alien <- read.csv("sf_aliens.csv")
setwd("C:/Users/chiar/OneDrive/Desktop/Uni/1_Statistica/15_Sistemi2/Progetto/ScienceFictionBooks")
books <- read_csv("sf_books.csv")
View(books)
table(books$Edition_Language) # poco interessante
View(books[,books$Edition_Language != "English"])
View(books[,books$Edition_Language != "English"])
View(books[,books$Edition_Language == "German"])
View(books[,books$Edition_Language == "German"])
table(books$Edition_Language) # poco interessante
View(books)
library(tidyverse)
movies <- read_csv("movies_metadata.csv")
problems(movies)
spec(movies)
help(problems)
View(movies)
View(movies[19731,])
