points(parana)
points(locs,pch=16,col=1:4)
### otteniamo i pesi del kriging semplice per il primo punto
KC <- krige.control(type = "SK", obj.mod = ml1)
x1 = locs[1,]
w1 =krweights(parana$coords,x1, KC)
points(parana, xlim=c(200,600), ylim=c(300,500))
points(x=x1[1], y=x1[2], col=2, pch=17, cex=1.5)
text(parana$coords[,1], 10 +parana$coords[,2], round(w1, dig=2), cex=0.8)
## ESERCIZIO:
# costruisci una mappa di previsione dell'intensità delle precipitazioni (con OK),
# ed una mappa dei corrispondenti errori di previsione usando la suguente griglia di punti:
locs <- pred_grid(parana$borders, by = 2) # perchè qui abbiamo già il confine dell'area A
plot(parana)
# PREVISIONE su 4 nuovi
locs =parana$loci.paper
points(parana)
points(locs,pch=16,col=1:4)
## ESERCIZIO:
# costruisci una mappa di previsione dell'intensità delle precipitazioni (con OK),
# ed una mappa dei corrispondenti errori di previsione usando la suguente griglia di punti:
locs <- pred_grid(parana$borders, by = 2) # perchè qui abbiamo già il confine dell'area A
library(survuval)
library(survival)
help("cox.zph")
library(tidyverse)
install.packages(c("broom.helpers", "cpp11", "curl", "data.table", "httr2", "intervals", "mvtnorm", "RcppEigen", "waldo", "webutils"))
mpg
?mpg
# hwy vs displ
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg) +
geom_point(mapping = aes(x=class, y=drv))
ggplot(data=mpg) +
geom_point(mapping = aes(x=hwy, y=cyl))
ggplot(data=mpg) +
geom_point(mapping = aes(x=cyl, y=hwy))
?mpg
ggplot(data=mpg) +
geom_point(mapping = aes(x = displ, y= hwy, color=class))
# variabile categoriale usata come grandezza dei punti
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy, size=class))
# trasparenza dei punti secondo class
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy, alpha=class))
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy, shape=class))
# scatterplot con punti di diverso colore
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), col=3)
# scatterplot con punti di diverso colore
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), col=4)
# scatterplot con punti di diverso colore
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), col="blue")
# scatterplot con punti di diverso colore
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), col=4)
# scatterplot con punti di diverso colore (solamente estetica)
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), col=4, pch=19, fill="blue")
# scatterplot con punti di diverso colore (solamente estetica)
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), col=4, pch=19, fill="blue")
# scatterplot con punti di diverso colore (solamente estetica)
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), col=4, pch=3)
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), col="yellow", fill="steelblue", pch=21)
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), col="blue", fill="yellow", pch=21)
# N.B. va fuori da aes
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), col=class)
?stroke
??stroke
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy, stroke), col=4, pch=3)
# FACETS
# sottografici dei dati, tanti quanti le modalità di una variabile categoriale
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_wrap( ~ class, nrow=2)
# facets sulla combinazione di 2 variabili
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv ~ cyl)
# facets sulla combinazione di 2 variabili
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(. ~ cyl)
# facets sulla combinazione di 2 variabili
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# GEOMS (oggetti geometrici)
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg) +
geom_smooth(mapping = aes(x=displ, y=hwy))
# curva lisciata tratteggiata
ggplot(data=mpg) +
geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
# curve lisciate, in base a drv (4 motrici, trazione anteriore e posteriore)
ggplot(data=mpg) +
geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv))
# curve lisciate in base a drv
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
# curve lisciate, colorate in base a drv (4 motrici, trazione anteriore e posteriore)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = T
)
# curve lisciate, colorate in base a drv (4 motrici, trazione anteriore e posteriore)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = F
)
# PIU' DI UN GEOM NELLO STESSO GRAFICO
# sia scatterplot che curva lisciata (si aggiungono 2 geom)
ggplot(data=mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
# se non voglio ripetere i mapping, posso passarlo direttamente a ggplot()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
# se non voglio ripetere i mapping, posso passarlo direttamente a ggplot()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth() # non serve ripassare tutto
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
x <- c(1,3,5,7)
lm(x ~ 1)
m1 <- lm(x ~ 1)
x <- c(1, 2, 3, 4)
y <- c(1, 3, 5, 7)
m1 <- lm(y ~ 1)
summary(m1)
predict?
?predict
help(predict)
predict(m1, 5)
d <- data.frame(c(x,y))
d
help("data.frame")
d <- data.frame(x, y)
d
m1 <- lm(y ~ x)
summary(m1)
predict(m1, 5)
summary(m1)
m1 <- lm(y ~ 1)
plot(x,y)
m1 <- lm(y ~ 1)
summary(m1)
R <- sqrt(-2*log(runif(1)))
theta <- 2*pi*runif(1)
X <- R * cos(theta)
Y <- R * sin(theta)
plot(X)
plot(Y)
plot(Y)
plot(X)
plot(Y)
plot(X, Y)
n <- 10000
rBoxMuller <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
Y <- R * sin(theta)
}
head(X)
X
rBoxMuller <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
Y <- R * sin(theta)
}
rBoxMuller()
rBoxMuller <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
Y <- R * sin(theta)
return(X,Y)
}
rBoxMuller <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
Y <- R * sin(theta)
return(X,Y)
}
(X, Y) <- rBoxMuller()
c(X, Y) <- rBoxMuller()
X <- rBoxMullerX()
rBoxMullerX <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
return(X)
}
rBoxMullerX <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
return(X)
}
rBoxMullerY <- function(n=10000) {
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
Y <- R * sin(theta)
return(Y)
}
X <- rBoxMullerX()
Y <- rBoxMullerY()
head(X)
# genero X v.c. normale
rBoxMullerX <- function(n=10000) {
set.seed(123)
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
X <- R * cos(theta)
return(X)
}
rBoxMullerY <- function(n=10000) {
set.seed(123)
R <- sqrt(-2*log(runif(n)))
theta <- 2*pi*runif(n)
Y <- R * sin(theta)
return(Y)
}
X <- rBoxMullerX()
Y <- rBoxMullerY()
plot(ecdf(X))
curve(ecdf(Y), col=2)
plot(ecdf(Y), col=2)
plot(ecdf(X))
plot(ecdf(Y), col=2, add=T)
help(pnorm)
curve(pnorm(seq(0,1,by=0.001)))
plot(pnorm(seq(0,1,by=0.001)), col=3)
plot(ecdf(X))
plot(ecdf(Y), col=2, add=T)
plot(ecdf(Y), col=2, add=T)
plot(ecdf(X))
plot(ecdf(Y), col=2, add=T)
help("qqnorm")
plot(qqnorm())
plot(-4, 4, qqnorm(x), col=3)
plot(-4, 4, qqnorm(x), col=3)
plot(-4, 4, qqnorm(), col=3)
plot(x, qqnorm(x), col=3)
curve(pnorm(x), col=3)
plot(ecdf(X))
plot(ecdf(Y), col=2, add=T)
curve(pnorm(x), col=3)
plot(ecdf(X))
plot(ecdf(Y), col=2, add=T)
curve(pnorm(x), col=3, add=T)
sim.norm.bm.1 <- function(n){
n1 <- floor((n-1)/2) + 1 # Per n pari n1 = n/2;
# per n dispari n1 = (n + 1)/2
#                  = (parte intera di (n-1)/2) + 1
u1 <- runif(n1)
u2 <- runif(n1)
R <- sqrt(-2*log(u1))
theta <- 2*pi*u2
x <- R*cos(theta)
y <- R*sin(theta)
c(x,y)[1:n] # Considero solo i primi n valori (se n e' dispari ne genero n+1).
}
out1 <- sim.norm.bm.1(2000)
hist(out1,br=25,xlab="",ylab="",main="2,000 simulazioni da una Normale",freq=FALSE)
curve(dnorm(x),from=-4,to=4,col="blue",add=TRUE)
out1 <- sim.norm.bm.1(10000)
hist(out1,br=25,xlab="",ylab="",main="10,000 simulazioni da una Normale",freq=FALSE)
curve(dnorm(x),from=-4,to=4,col="blue",add=TRUE)
library(MLGdata)
install.packages("MLGdata")
library(MLGdata)
Clotting
?Clotting
plot(Clotting$u, Clotting$tempo, color=as.factor(lotto))
plot(Clotting$u, Clotting$tempo, color=as.factor(Clotting$lotto))
plot(Clotting$u, Clotting$tempo, col=as.factor(Clotting$lotto))
plot(Clotting$u, Clotting$tempo, col=as.factor(Clotting$lotto), pch=19)
library(tidyverse)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(lotto), pch=19)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(lotto), pch=19)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19)
as.factor(Clotting$lotto)
str(Clotting)
help("relevel")
levels(Clotting$lotto) <- c(2,1)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_bw()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto) + 1, pch=19) +
theme_bw()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto) + 1, pch=19) +
theme_bw()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto + 1), pch=19) +
theme_bw()
levels(Clotting$lotto) <- c(3,2)
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_bw()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_light()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_void()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_bw()
ggplot(data=Clotting)+
geom_point(aes(x=u, y=tempo), col=as.factor(Clotting$lotto), pch=19) +
theme_light()
Credit
head(Credit)
str(Credit)
Aids
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi, nbreaks=10)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_discrete(nbreaks=10) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_discrete(breaks=seq(0,20,by=5)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks=seq(0,20,by=5)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks=breaks = seq(min(Aids$Year), max(Aids$Year), by = 1)) +
i
Aids
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks=breaks = seq(min(Aids$Year), max(Aids$Year), by = 1)) +
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks = seq(min(Aids$Year), max(Aids$Year), by = 1)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks = seq(min(tempo), max(tempo), by = 1)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks = seq(min(x), max(x), by = 1)) +
theme_light()
ggplot(data=Aids)+
geom_point(aes(x=tempo, y=casi)) +
scale_x_continuous(breaks = seq(min(Aids$tempo), max(Aids$tempo), by = 1)) +
theme_light()
# DATI RAGGRUPPATI
Beetles
# non raggruppati
Beetles10
# DATI RAGGRUPPATI
Beetles
help("MLGdata")
# RISPOSTE POLITOMICHE
Customer
# RISPOSTE POLITOMICHE
head(Customer)
Customer[450:460,]
Customer[400:410,]
Customer[30:40,]
Customer[50:60,]
Customer[100:110,]
Customer[130:150,]
Customer[230:250,]
table(Customer)
ftable(Customer)
table(Customer)
ftable(Customer)
f.table(Customer)
ftable(Customer)
Customer3
# TABELLE DI FREQUENZA
Drugs2
# TABELLE DI FREQUENZA
Drugs
Drugs2
Drugs3
# TABELLE DI FREQUENZA
# raggruppati:
Drugs
# TABELLE DI FREQUENZA
# raggruppati:
Drugs2
# TABELLE DI FREQUENZA
# raggruppati:
Drugs
# RISPOSTE MULTIVARIATE
Orthodont
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
install.packages(c("AlgDesign", "askpass", "bit", "bit64", "bitops", "broom", "car", "cards", "commonmark", "corrplot", "credentials", "curl", "data.table", "Deriv", "doBy", "dotCall64", "e1071", "evaluate", "fda", "fields", "FNN", "fs", "future.apply", "gdata", "gert", "ggstats", "glue", "gtable", "httr2", "igraph", "jsonlite", "knitr", "ks", "maps", "modelenv", "mvtnorm", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgdown", "pls", "profvis", "progressr", "ps", "quantreg", "R.oo", "Rcpp", "rgl", "rmarkdown", "rstpm2", "rstudioapi", "sandwich", "sf", "slider", "sodium", "spam", "stars", "statnet.common", "survminer", "sys", "timeDate", "tinytex", "tseries", "waldo", "webutils", "withr", "wk", "xfun", "xts"))
setwd("C:/Users/chiar/OneDrive/Desktop/Uni/1_Statistica/15_Sistemi2/Progetto/ScienceFictionBooks")
library(tidyverse)
#### TIDY ####
t_books <- read_csv("sf_books_tidy.csv")
View(t_books %>% filter(Author_Name == "Stephen King"))
View(t_books %>% filter(Year_published == 1818))
library(tidyverse)
#### TIDY ####
t_books <- read_csv("sf_books_tidy.csv")
View(t_books %>% filter(Author_Name == "Stephen King"))
View(t_books %>% select(Author_Name)) %>% unique() %>% sort(Author_Name)
View %>% t_books %>% select(Author_Name) %>% unique() %>% sort(Author_Name)
View %>% t_books %>% select(,Author_Name) %>% unique() %>% sort(Author_Name)
View %>% t_books %>% select(t_books$Author_Name) %>% unique() %>% sort(t_books$Author_Name)
View %>% t_books %>% select(t_books$Author_Name) %>% unique() %>% sort()
View( t_books %>% select(t_books$Author_Name) %>% unique() %>% sort())
t_books.select(Author_Name).unique().sort()
help(unique)
t_books.select(Author_Name).unique(Author_Name).sort()
t_books.select(Author_Name)
library(tidyverse)
select(t_books, Author_Name).unique(Author_Name).sort()
select(t_books, Author_Name) %>% unique(Author_Name) %>% sort()
setwd("C:/Users/chiar/OneDrive/Desktop/Uni/1_Statistica/15_Sistemi2/Progetto/ScienceFictionBooks")
library(tidyverse)
#### TIDY ####
t_books <- read_csv("sf_books_tidy.csv")
t_books %>% select("Rating_score") %>% mean()
mean(t_books$Rating_score)
setwd("C:/Users/chiar/OneDrive/Desktop/Uni/1_Statistica/15_Sistemi2/Progetto/ScienceFictionBooks")
library(tidyverse)
View(t_books %>% filter(Year_published == 1818))
View(t_books)
#### TIDY ####
t_books <- read_csv("sf_books_tidy.csv")
library(tidyverse)
#### TIDY ####
t_books <- read_csv("sf_books_tidy.csv")
View(t_books)
library(tidyverse)
#### TIDY ####
t_books <- read_csv("sf_books_tidy.csv")
View(t_books)
library(tidyverse)
#### TIDY ####
t_books <- read_csv("sf_books_tidy.csv")
View(t_books)
library(tidyverse)
cpunk <- read.csv("sf_cyberpunk.csv")
View(cpunk)
library(tidyverse)
steam <- read.csv("sf_steampunk.csv")
View(steam)
library(tidyverse)
#### TIDY ####
t_books <- read_csv("sf_books_tidy.csv")
View(t_books)
library(tidyverse)
#### TIDY ####
t_books <- read_csv("sf_books_tidy.csv")
View(t_books)
View(t_books)
library(tidyverse)
#### TIDY ####
t_books <- read_csv("sf_books_tidy.csv")
View(t_books)
